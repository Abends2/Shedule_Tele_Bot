# ----- Author: Abends2 -----
# ----- Shedule KPK Bot -----

from aiogram import executor, types
from create_bot import dispatcher, bot
import logging
import emoji
import datetime

from handlers import date_scraper, giving_file, informer, shedule
from keyboards import bttns


# logs will be ON
logging.basicConfig(filename="../logs/logs.txt", filemode='w', level=logging.INFO)

# a list of commands
cmd_strings = '''-------------------	
<b>–°—Ç–∞—Ä—Ç</b> - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
<b>–ü–æ–º–æ—â—å</b> - –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
<b>–ò–Ω—Ñ–æ</b> - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ö–æ–ª–ª–µ–¥–∂–µ –∏ –í–£–ó'e
<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b> - –ü–æ–¥—Å–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
<b>–ù–µ–¥–µ–ª—è</b> - –í—ã–≤–µ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —á–∏—Å–ª–æ –∏ –Ω–µ–¥–µ–ª—é –æ–±—É—á–µ–Ω–∏—è
<b>–¢–∏—Ç—É–ª—å–Ω–∏–∫</b> - –í—ã–¥–∞—Ç—å word-—Ñ–∞–π–ª —Å —Ç–∏—Ç—É–ª—å–Ω—ã–º –ª–∏—Å—Ç–æ–º
<b>–û –±–æ—Ç–µ</b> - –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
-------------------

‚ùóÔ∏è‚ùóÔ∏è–î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞'''


async def on_startup(_):
	logging.info("Bot activated")


# ---------- /start ----------
@dispatcher.message_handler(text=['üëã–°—Ç–∞—Ä—Ç', '–°—Ç–∞—Ä—Ç', 'start'])
async def start(message: types.Message):
	try:
		me = await bot.get_me()
	finally:
		await message.answer(text=f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}' + emoji.emojize(":fire:") + emoji.emojize(":handshake:") + '\n' + '–Ø - <b>shedule KPK bot</b>. –ù–∞–∂–º–∏ <b>–ü–æ–º–æ—â—å</b>, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã', parse_mode="html", reply_markup=bttns)
		logging.info(f"Greeted successfully, user={message.from_user}, time={datetime.datetime.now()}")


# ---------- /help ----------
@dispatcher.message_handler(text=['üÜò–ü–æ–º–æ—â—å', '–ü–æ–º–æ—â—å', 'help'])
async def helping(message: types.Message):
	await message.answer(text=emoji.emojize(":check_mark_button:") + '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n' + cmd_strings, parse_mode= 'HTML', reply_markup=bttns)
	logging.info(f"Bot helped his user, user={message.from_user}, time={datetime.datetime.now()}")


# ---------- /about_me ----------
@dispatcher.message_handler(text=['ü§ñ–û –±–æ—Ç–µ', '–û –±–æ—Ç–µ', 'about bot'])
async def about(message: types.Message):
	await message.answer(text='–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å: (AUTHOR\'s TELEGRAM)\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–∏—Å–∞—Ç—å –Ω–∞ –ø–æ—á—Ç—É: example@gmail.com\n–¢–≤–æ–∏ –¥—Ä—É–∑—å—è –º–æ–≥—É—Ç –º–µ–Ω—è –Ω–∞–π—Ç–∏ –∫–∞–∫: (BOT_URL_WITH_@)', reply_markup=bttns)
	logging.info(f"Bot told about himself, user={message.from_user}, time={datetime.datetime.now()}")


date_scraper.register_handlers_date_scraper(dispatcher)
giving_file.register_handlers_giving_file(dispatcher)
informer.register_handlers_informer(dispatcher)
shedule.register_handlers_shedule(dispatcher)


if __name__ == "__main__":
	# Start Bot
	executor.start_polling(dispatcher, skip_updates=False, on_startup=on_startup)